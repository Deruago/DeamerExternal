#ifndef DEAMER_EXTERNAL_CPP_TOOL_OOPTOPLANTUML_CLASSDIAGRAMTEMPLATE_h
#define DEAMER_EXTERNAL_CPP_TOOL_OOPTOPLANTUML_CLASSDIAGRAMTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::external::cpp::tool::ooptoplantuml
{
	/*!	\class ClassDiagramTemplate
	 *
	 *	\brief Generates code for "ClassDiagramTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class ClassDiagramTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			abstract_declaration_,
			association_relation_,
			class_declaration_,
			enum_member_,
			enum_name_,
			enumeration_declaration_,
			file_,
			function_,
			function_argument_,
			function_argument_name_,
			function_argument_type_,
			function_name_,
			function_type_,
			inheritance_relation_,
			interface_declaration_,
			interface_realisation_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			optional_comma_,
			property_,
			property_name_,
			property_type_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			type_category_,
			type_name_,
			type_name_lhs_,
			type_name_rhs_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char*
		ConvertEnumToName(::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type
							  enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				abstract_declaration_: {
				return "abstract_declaration";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				association_relation_: {
				return "association_relation";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				class_declaration_: {
				return "class_declaration";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				enum_member_: {
				return "enum_member";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				enum_name_: {
				return "enum_name";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				enumeration_declaration_: {
				return "enumeration_declaration";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				function_: {
				return "function";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				function_argument_: {
				return "function_argument";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				function_argument_name_: {
				return "function_argument_name";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				function_argument_type_: {
				return "function_argument_type";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				function_name_: {
				return "function_name";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				function_type_: {
				return "function_type";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				inheritance_relation_: {
				return "inheritance_relation";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				interface_declaration_: {
				return "interface_declaration";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				interface_realisation_: {
				return "interface_realisation";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				optional_comma_: {
				return "optional_comma";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				property_: {
				return "property";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				property_name_: {
				return "property_name";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				property_type_: {
				return "property_type";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				right_curly_bracket_: {
				return "right_curly_bracket";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				type_category_: {
				return "type_category";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				type_name_: {
				return "type_name";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				type_name_lhs_: {
				return "type_name_lhs";
			}

			case ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
				type_name_rhs_: {
				return "type_name_rhs";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type type =
				::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::ScopeType
				scope_type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::
					ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(
				::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::ScopeType
					scope_type_,
				bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;
			}

			VariableScope(
				const char* text,
				::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::ScopeType
					scope_type_,
				bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;
			}

			VariableScope(
				std::vector<VariableBase*> variable,
				::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::ScopeType
					scope_type_,
				bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::
									ScopeType::Upper_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::
									ScopeType::Lower_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::
									ScopeType::Snake_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::
									ScopeType::Slash_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::
									ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ =
				new VariableScope(::deamer::external::cpp::tool::ooptoplantuml::
									  ClassDiagramTemplate::ScopeType::Default_,
								  true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::external::cpp::tool::ooptoplantuml::
									  ClassDiagramTemplate::ScopeType::Variable_Field_,
								  true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::external::cpp::tool::ooptoplantuml::
									  ClassDiagramTemplate::ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_abstract_declaration_ : public VariableScopes
		{
			static constexpr auto name = "abstract_declaration_";

			Variable_abstract_declaration_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					abstract_declaration_;
			}

			virtual ~Variable_abstract_declaration_() override = default;

			Variable_abstract_declaration_(ClassDiagramTemplate* classdiagramtemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					abstract_declaration_;
			}

			Variable_abstract_declaration_&
			operator=(const Variable_abstract_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_association_relation_ : public VariableScopes
		{
			static constexpr auto name = "association_relation_";

			Variable_association_relation_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					association_relation_;
			}

			virtual ~Variable_association_relation_() override = default;

			Variable_association_relation_(ClassDiagramTemplate* classdiagramtemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					association_relation_;
			}

			Variable_association_relation_&
			operator=(const Variable_association_relation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_class_declaration_ : public VariableScopes
		{
			static constexpr auto name = "class_declaration_";

			Variable_class_declaration_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					class_declaration_;
			}

			virtual ~Variable_class_declaration_() override = default;

			Variable_class_declaration_(ClassDiagramTemplate* classdiagramtemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					class_declaration_;
			}

			Variable_class_declaration_& operator=(const Variable_class_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_enum_member_ : public VariableScopes
		{
			static constexpr auto name = "enum_member_";

			Variable_enum_member_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					enum_member_;
			}

			virtual ~Variable_enum_member_() override = default;

			Variable_enum_member_(ClassDiagramTemplate* classdiagramtemplate_,
								  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					enum_member_;
			}

			Variable_enum_member_& operator=(const Variable_enum_member_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_enum_name_ : public VariableScopes
		{
			static constexpr auto name = "enum_name_";

			Variable_enum_name_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					enum_name_;
			}

			virtual ~Variable_enum_name_() override = default;

			Variable_enum_name_(ClassDiagramTemplate* classdiagramtemplate_,
								const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					enum_name_;
			}

			Variable_enum_name_& operator=(const Variable_enum_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_enumeration_declaration_ : public VariableScopes
		{
			static constexpr auto name = "enumeration_declaration_";

			Variable_enumeration_declaration_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					enumeration_declaration_;
			}

			virtual ~Variable_enumeration_declaration_() override = default;

			Variable_enumeration_declaration_(ClassDiagramTemplate* classdiagramtemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					enumeration_declaration_;
			}

			Variable_enumeration_declaration_&
			operator=(const Variable_enumeration_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(ClassDiagramTemplate* classdiagramtemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("@startuml\n\n"),
					 GenerateVariable(classdiagramtemplate_->class_declaration_->Variable_Field()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 classdiagramtemplate_->interface_declaration_->Variable_Field()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 classdiagramtemplate_->abstract_declaration_->Variable_Field()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 classdiagramtemplate_->enumeration_declaration_->Variable_Field()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 classdiagramtemplate_->inheritance_relation_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 classdiagramtemplate_->interface_realisation_->Variable_Field()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 classdiagramtemplate_->association_relation_->Variable_Field()),
					 GenerateVariable("\n\n@enduml")}));
				Content_->type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("ClassDiagram")}));
				File_name_->type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::external::cpp::tool::ooptoplantuml")}));
				Namespace_->type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_function_ : public VariableScopes
		{
			static constexpr auto name = "function_";

			Variable_function_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_;
			}

			virtual ~Variable_function_() override = default;

			Variable_function_(ClassDiagramTemplate* classdiagramtemplate_,
							   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_;
			}

			Variable_function_& operator=(const Variable_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_function_argument_ : public VariableScopes
		{
			static constexpr auto name = "function_argument_";

			Variable_function_argument_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_argument_;
			}

			virtual ~Variable_function_argument_() override = default;

			Variable_function_argument_(ClassDiagramTemplate* classdiagramtemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_argument_;
			}

			Variable_function_argument_& operator=(const Variable_function_argument_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_function_argument_name_ : public VariableScopes
		{
			static constexpr auto name = "function_argument_name_";

			Variable_function_argument_name_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_argument_name_;
			}

			virtual ~Variable_function_argument_name_() override = default;

			Variable_function_argument_name_(ClassDiagramTemplate* classdiagramtemplate_,
											 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_argument_name_;
			}

			Variable_function_argument_name_&
			operator=(const Variable_function_argument_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_function_argument_type_ : public VariableScopes
		{
			static constexpr auto name = "function_argument_type_";

			Variable_function_argument_type_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_argument_type_;
			}

			virtual ~Variable_function_argument_type_() override = default;

			Variable_function_argument_type_(ClassDiagramTemplate* classdiagramtemplate_,
											 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_argument_type_;
			}

			Variable_function_argument_type_&
			operator=(const Variable_function_argument_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_function_name_ : public VariableScopes
		{
			static constexpr auto name = "function_name_";

			Variable_function_name_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_name_;
			}

			virtual ~Variable_function_name_() override = default;

			Variable_function_name_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_name_;
			}

			Variable_function_name_& operator=(const Variable_function_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_function_type_ : public VariableScopes
		{
			static constexpr auto name = "function_type_";

			Variable_function_type_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_type_;
			}

			virtual ~Variable_function_type_() override = default;

			Variable_function_type_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					function_type_;
			}

			Variable_function_type_& operator=(const Variable_function_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_inheritance_relation_ : public VariableScopes
		{
			static constexpr auto name = "inheritance_relation_";

			Variable_inheritance_relation_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					inheritance_relation_;
			}

			virtual ~Variable_inheritance_relation_() override = default;

			Variable_inheritance_relation_(ClassDiagramTemplate* classdiagramtemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					inheritance_relation_;
			}

			Variable_inheritance_relation_&
			operator=(const Variable_inheritance_relation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_interface_declaration_ : public VariableScopes
		{
			static constexpr auto name = "interface_declaration_";

			Variable_interface_declaration_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					interface_declaration_;
			}

			virtual ~Variable_interface_declaration_() override = default;

			Variable_interface_declaration_(ClassDiagramTemplate* classdiagramtemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					interface_declaration_;
			}

			Variable_interface_declaration_&
			operator=(const Variable_interface_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_interface_realisation_ : public VariableScopes
		{
			static constexpr auto name = "interface_realisation_";

			Variable_interface_realisation_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					interface_realisation_;
			}

			virtual ~Variable_interface_realisation_() override = default;

			Variable_interface_realisation_(ClassDiagramTemplate* classdiagramtemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					interface_realisation_;
			}

			Variable_interface_realisation_&
			operator=(const Variable_interface_realisation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(ClassDiagramTemplate* classdiagramtemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(ClassDiagramTemplate* classdiagramtemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(ClassDiagramTemplate* classdiagramtemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_comma_ : public VariableScopes
		{
			static constexpr auto name = "optional_comma_";

			Variable_optional_comma_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					optional_comma_;
			}

			virtual ~Variable_optional_comma_() override = default;

			Variable_optional_comma_(ClassDiagramTemplate* classdiagramtemplate_,
									 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					optional_comma_;
			}

			Variable_optional_comma_& operator=(const Variable_optional_comma_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_property_ : public VariableScopes
		{
			static constexpr auto name = "property_";

			Variable_property_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					property_;
			}

			virtual ~Variable_property_() override = default;

			Variable_property_(ClassDiagramTemplate* classdiagramtemplate_,
							   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					property_;
			}

			Variable_property_& operator=(const Variable_property_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_property_name_ : public VariableScopes
		{
			static constexpr auto name = "property_name_";

			Variable_property_name_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					property_name_;
			}

			virtual ~Variable_property_name_() override = default;

			Variable_property_name_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					property_name_;
			}

			Variable_property_name_& operator=(const Variable_property_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_property_type_ : public VariableScopes
		{
			static constexpr auto name = "property_type_";

			Variable_property_type_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					property_type_;
			}

			virtual ~Variable_property_type_() override = default;

			Variable_property_type_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					property_type_;
			}

			Variable_property_type_& operator=(const Variable_property_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(ClassDiagramTemplate* classdiagramtemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(ClassDiagramTemplate* classdiagramtemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_type_category_ : public VariableScopes
		{
			static constexpr auto name = "type_category_";

			Variable_type_category_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_category_;
			}

			virtual ~Variable_type_category_() override = default;

			Variable_type_category_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_category_;
			}

			Variable_type_category_& operator=(const Variable_type_category_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_type_name_ : public VariableScopes
		{
			static constexpr auto name = "type_name_";

			Variable_type_name_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_name_;
			}

			virtual ~Variable_type_name_() override = default;

			Variable_type_name_(ClassDiagramTemplate* classdiagramtemplate_,
								const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_name_;
			}

			Variable_type_name_& operator=(const Variable_type_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_type_name_lhs_ : public VariableScopes
		{
			static constexpr auto name = "type_name_lhs_";

			Variable_type_name_lhs_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_name_lhs_;
			}

			virtual ~Variable_type_name_lhs_() override = default;

			Variable_type_name_lhs_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_name_lhs_;
			}

			Variable_type_name_lhs_& operator=(const Variable_type_name_lhs_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_type_name_rhs_ : public VariableScopes
		{
			static constexpr auto name = "type_name_rhs_";

			Variable_type_name_rhs_() : VariableScopes()
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_name_rhs_;
			}

			virtual ~Variable_type_name_rhs_() override = default;

			Variable_type_name_rhs_(ClassDiagramTemplate* classdiagramtemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::external::cpp::tool::ooptoplantuml::ClassDiagramTemplate::Type::
					type_name_rhs_;
			}

			Variable_type_name_rhs_& operator=(const Variable_type_name_rhs_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. ClassDiagramTemplate.member = "auto-generated";
		Variable_abstract_declaration_* abstract_declaration_ =
			new Variable_abstract_declaration_();
		Variable_association_relation_* association_relation_ =
			new Variable_association_relation_();
		Variable_class_declaration_* class_declaration_ = new Variable_class_declaration_();
		Variable_enum_member_* enum_member_ = new Variable_enum_member_();
		Variable_enum_name_* enum_name_ = new Variable_enum_name_();
		Variable_enumeration_declaration_* enumeration_declaration_ =
			new Variable_enumeration_declaration_();
		Variable_file_* file_ = new Variable_file_();
		Variable_function_* function_ = new Variable_function_();
		Variable_function_argument_* function_argument_ = new Variable_function_argument_();
		Variable_function_argument_name_* function_argument_name_ =
			new Variable_function_argument_name_();
		Variable_function_argument_type_* function_argument_type_ =
			new Variable_function_argument_type_();
		Variable_function_name_* function_name_ = new Variable_function_name_();
		Variable_function_type_* function_type_ = new Variable_function_type_();
		Variable_inheritance_relation_* inheritance_relation_ =
			new Variable_inheritance_relation_();
		Variable_interface_declaration_* interface_declaration_ =
			new Variable_interface_declaration_();
		Variable_interface_realisation_* interface_realisation_ =
			new Variable_interface_realisation_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_optional_comma_* optional_comma_ = new Variable_optional_comma_();
		Variable_property_* property_ = new Variable_property_();
		Variable_property_name_* property_name_ = new Variable_property_name_();
		Variable_property_type_* property_type_ = new Variable_property_type_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_type_category_* type_category_ = new Variable_type_category_();
		Variable_type_name_* type_name_ = new Variable_type_name_();
		Variable_type_name_lhs_* type_name_lhs_ = new Variable_type_name_lhs_();
		Variable_type_name_rhs_* type_name_rhs_ = new Variable_type_name_rhs_();

	public:
		ClassDiagramTemplate()
		{
			*abstract_declaration_ = Variable_abstract_declaration_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("abstract "), GenerateVariable(type_name_->This()),
						   GenerateVariable("\n"), GenerateVariable("{"), GenerateVariable("\n"),
						   GenerateVariable(property_->Variable_Field()), GenerateVariable("\n\n"),
						   GenerateVariable(function_->Variable_Field()), GenerateVariable("\n"),
						   GenerateVariable("}")}));
			*association_relation_ = Variable_association_relation_(
				this, std::vector<VariableBase*>({GenerateVariable(type_name_lhs_->This()),
												  GenerateVariable(" ---> "),
												  GenerateVariable(type_name_rhs_->This())}));
			*class_declaration_ = Variable_class_declaration_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("class "), GenerateVariable(type_name_->This()),
						   GenerateVariable("\n"), GenerateVariable("{"), GenerateVariable("\n"),
						   GenerateVariable(property_->Variable_Field()), GenerateVariable("\n\n"),
						   GenerateVariable(function_->Variable_Field()), GenerateVariable("\n"),
						   GenerateVariable("}")}));
			*enum_member_ = Variable_enum_member_(
				this, std::vector<VariableBase*>({GenerateVariable(enum_name_->This())}));
			*enum_name_ = Variable_enum_name_(this, std::vector<VariableBase*>({}));
			*enumeration_declaration_ = Variable_enumeration_declaration_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("enum "), GenerateVariable(type_name_->This()),
						   GenerateVariable("\n"), GenerateVariable("{"), GenerateVariable("\n"),
						   GenerateVariable(enum_member_->Variable_Field()), GenerateVariable("\n"),
						   GenerateVariable("}")}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*function_ = Variable_function_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(function_type_->This()), GenerateVariable(" "),
						   GenerateVariable(function_name_->This()), GenerateVariable("("),
						   GenerateVariable(function_argument_->Variable_Field()),
						   GenerateVariable(")")}));
			*function_argument_ = Variable_function_argument_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(optional_comma_->This()),
						   GenerateVariable(function_argument_name_->This()), GenerateVariable(" "),
						   GenerateVariable(function_argument_type_->This())}));
			*function_argument_name_ =
				Variable_function_argument_name_(this, std::vector<VariableBase*>({}));
			*function_argument_type_ =
				Variable_function_argument_type_(this, std::vector<VariableBase*>({}));
			*function_name_ = Variable_function_name_(this, std::vector<VariableBase*>({}));
			*function_type_ = Variable_function_type_(this, std::vector<VariableBase*>({}));
			*inheritance_relation_ = Variable_inheritance_relation_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(type_category_->This()), GenerateVariable(" "),
						   GenerateVariable(type_name_lhs_->This()), GenerateVariable(" extends "),
						   GenerateVariable(type_name_rhs_->This())}));
			*interface_declaration_ = Variable_interface_declaration_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("interface "), GenerateVariable(type_name_->This()),
						   GenerateVariable("\n"), GenerateVariable("{"), GenerateVariable("\n"),
						   GenerateVariable(function_->Variable_Field()), GenerateVariable("\n"),
						   GenerateVariable("}")}));
			*interface_realisation_ = Variable_interface_realisation_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable(type_category_->This()), GenerateVariable(" "),
					 GenerateVariable(type_name_lhs_->This()), GenerateVariable(" implements "),
					 GenerateVariable(type_name_rhs_->This())}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*optional_comma_ = Variable_optional_comma_(this, std::vector<VariableBase*>({}));
			*property_ = Variable_property_(
				this, std::vector<VariableBase*>({GenerateVariable(property_type_->This()),
												  GenerateVariable(" "),
												  GenerateVariable(property_name_->This())}));
			*property_name_ = Variable_property_name_(this, std::vector<VariableBase*>({}));
			*property_type_ = Variable_property_type_(this, std::vector<VariableBase*>({}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*type_category_ = Variable_type_category_(this, std::vector<VariableBase*>({}));
			*type_name_ = Variable_type_name_(this, std::vector<VariableBase*>({}));
			*type_name_lhs_ = Variable_type_name_lhs_(this, std::vector<VariableBase*>({}));
			*type_name_rhs_ = Variable_type_name_rhs_(this, std::vector<VariableBase*>({}));

			variables_.emplace_back(abstract_declaration_);
			variables_.emplace_back(association_relation_);
			variables_.emplace_back(class_declaration_);
			variables_.emplace_back(enum_member_);
			variables_.emplace_back(enum_name_);
			variables_.emplace_back(enumeration_declaration_);
			variables_.emplace_back(file_);
			variables_.emplace_back(function_);
			variables_.emplace_back(function_argument_);
			variables_.emplace_back(function_argument_name_);
			variables_.emplace_back(function_argument_type_);
			variables_.emplace_back(function_name_);
			variables_.emplace_back(function_type_);
			variables_.emplace_back(inheritance_relation_);
			variables_.emplace_back(interface_declaration_);
			variables_.emplace_back(interface_realisation_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(optional_comma_);
			variables_.emplace_back(property_);
			variables_.emplace_back(property_name_);
			variables_.emplace_back(property_type_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(type_category_);
			variables_.emplace_back(type_name_);
			variables_.emplace_back(type_name_lhs_);
			variables_.emplace_back(type_name_rhs_);
		}

		virtual ~ClassDiagramTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_EXTERNAL_CPP_TOOL_OOPTOPLANTUML_CLASSDIAGRAMTEMPLATE_h
